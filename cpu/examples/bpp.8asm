; x = x + y
	add
; x = x - y
	sub
; x = -x
	tnx
; x = x << y
	shl
; x = x >> y
	shr
; x = x >>> y
	asr
; x = x & y
	and
; x = x ^ y
	eor
; x = x | y
	ior
; x = ~x
	ntx
; x = x && y: bool x,y
	and
; x = x || y: bool x,y
	ior
; x = !x: bool x
	ntx
; x = x == y
	cxy
	beq +4
	lzx
	jmp +2
    lox
; x = x != y
	cxy
	bnq +4
	lzx
	jmp +2
	lox
; x = x > y
	cyx
	bmi +4
	lzx
	jmp +2
	lox
; x = x < y
	cxy
	bmi +4
	lzx
	jmp +2
	lox
; x = x <= y
	cyx
	bpl +4
	lzx
	jmp +2
	lox
; x = x >= y
	cxy
	bpl +4
	lzx
	jmp +2
	lox
; ++x
	inx
; --x
	dcx
; x = *x
	lxx
; x = cmp ? a : y
	bnq +4
	tax
	jmp +2
    tyx
; if (x) s1
	cpx #0
	bnq if_end
	;s1
if_end:
; if (x) s1 else s2
	cpx #0
	bnq if_else
	;s1
	jmp if_end
if_else:
	;s2
if_end:
; while (x) s1
while:
	cpx #0
	beq while_end
	;s1
	jmp while
while_end:
; return a;
	rts
; fcall(a), fcall(a, b)
	jsr fcall
; fcall(a, b, x, y, ...)
	pha
	;...
	phy ; 3rd
	phx ; 2nd
	phb ; 1st
	pha ; 0th
	tsa
	jsr fcall
; a = fcall(...)
	;...
	jsr fcall
; void fcall(...), Ignore return value
	pha ; backup
	;...
	jsr fcall
	pla ; restore
; void fcall(a) { }
fcall:
	rts
; char fcall(a) { return 123 }
fcall:
	lda #123
	rts
; void fcall(a,b,x,y,...) { }
fcall:
	ina
	lba ; a
	ina
	lba ; b
	ina
	lba ; x
	ina
	lba ; y
	;...
	rts
